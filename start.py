import sys
import os
import traceback
from datetime import datetime
import telebot
import configparser
import glob
import uuid
import sys

# print("Checking for updates...")
# try:
#     import updater
#     updater.check_and_update(auto_update=True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
# except Exception as e:
#     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
    print("Running in a PyInstaller bundle")
    if os.path.exists('config.py'):
        from telemetry.config import verify_and_get_credentials
    else:
        from telemetry.config_for_github import verify_and_get_credentials
else:
    print("Running in a normal Python environment")
    from telemetry.config_for_github import verify_and_get_credentials    

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
print("\nStarting All Tweaker...")

telemetry_override = None  # None = –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º, True = –≤–∫–ª—é—á–∏—Ç—å, False = –æ—Ç–∫–ª—é—á–∏—Ç—å

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π
TELEMETRY_OFF_FLAGS = {'-nt', '-n', '--no-telemetry'}
TELEMETRY_ON_FLAGS = {'-t', '-d', '--debugging', '--telemetry'}
for arg in sys.argv[1:]:
    if arg.lower() in TELEMETRY_OFF_FLAGS:
        telemetry_override = False
        print("[CLI] Telemetry will be DISABLED by command-line flag.")
        break
    elif arg.lower() in TELEMETRY_ON_FLAGS:
        telemetry_override = True
        print("[CLI] Telemetry will be ENABLED by command-line flag.")
        break

def is_telemetry_enabled():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç"""
    global telemetry_override
    if telemetry_override is not None:
        return telemetry_override
    try:
        config = configparser.ConfigParser()
        config.read('user_data//settings.ini', encoding='cp1251')
        return config.getboolean('Telemetry', 'send_on_close', fallback=True)
    except Exception as e:
        print(f"Error checking telemetry settings: {e}")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not is_telemetry_enabled():
            return
            
        token, chat_id = verify_and_get_credentials()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot = telebot.TeleBot(token)
        bot.send_message(chat_id, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")

def send_error_to_telegram(exc_type=None, exc_value=None, exc_traceback=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ Telegram"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not is_telemetry_enabled():
            return
            
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if exc_type is None:
            exc_type, exc_value, exc_traceback = sys.exc_info()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
        if exc_type is None:
            return  # –ù–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ All Tweaker!\n\n"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        try:
            error_type = exc_type.__name__ if exc_type and hasattr(exc_type, '__name__') else str(exc_type)
        except:
            error_type = "Unknown Error"
        
        error_message += f"–¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}\n"
        error_message += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {str(exc_value) if exc_value is not None else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ'}\n"
        error_message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        error_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{os.getenv('USERNAME', 'unknown')}\n\n"
        error_message += f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if exc_traceback is not None:
            try:
                error_message += "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n"
                error_message += "".join(traceback.format_tb(exc_traceback))
            except:
                error_message += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_telegram_message(error_message)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            send_telegram_message(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ All Tweaker, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏: {str(e)}")
        except:
            pass

def send_log_file():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª"""
    try:
        print("Attempting to send log file...")
        # –ò—â–µ–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ user_data//logs
        log_files = glob.glob('user_data//logs/*.log')
        if not log_files:
            print("No log files found")
            return
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        latest_log = max(log_files, key=os.path.getctime)
        print(f"Found latest log file: {latest_log}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from telemetry.telemetry_manager import TelemetryManager
        manager = TelemetryManager()
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞
        try:
            with open(latest_log, 'r', encoding='utf-8') as f:
                log_content = f.read()
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ª–æ–≥-—Ñ–∞–π–ª–∞
            log_message = f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ {os.path.basename(latest_log)}:\n\n{log_content}"
            manager.send_message(log_message)
            print("Log file content sent successfully")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {str(e)}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞: {str(e)}")

def custom_exception_handler(exc_type, exc_value, exc_traceback):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    print("Exception caught by custom handler:")
    print(f"Type: {exc_type}")
    print(f"Value: {exc_value}")
    print("Traceback:")
    traceback.print_tb(exc_traceback)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    send_error_to_telegram(exc_type, exc_value, exc_traceback)
    # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    sys.__excepthook__(exc_type, exc_value, exc_traceback)

print("Setting up exception handler...")
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
sys.excepthook = custom_exception_handler

print("Starting main program...")
try:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    print("Importing main module...")
    if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
        import main
    else:
        import main
    print("Main module imported successfully")
    
    # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    if is_telemetry_enabled():
        print("Telemetry is enabled")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª
        send_log_file()
        print("Collecting and sending telemetry...")
        main.collect_and_send()
    else:
        print("Telemetry is disabled")
    
except Exception as e:
    print(f"Error in main program: {e}")
    print("Traceback:")
    traceback.print_exc()
    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ
    send_error_to_telegram()
    raise  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ 